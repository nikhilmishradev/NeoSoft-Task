package com.androidtechguru.neosoft.task.viewmodelimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport androidx.navigation.compose.rememberNavControllerimport com.androidtechguru.neosoft.task.data.model.Statisticsimport com.androidtechguru.neosoft.task.domain.model.Imageimport com.androidtechguru.neosoft.task.domain.model.Itemimport com.androidtechguru.neosoft.task.domain.usecase.GetImagesUseCaseimport com.androidtechguru.neosoft.task.domain.usecase.GetItemsUseCaseimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.SharingStartedimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.flow.flatMapLatestimport kotlinx.coroutines.flow.mapimport kotlinx.coroutines.flow.stateInimport kotlinx.coroutines.launchimport javax.inject.Injectimport kotlin.random.Random@HiltViewModelclass MainViewModel @Inject constructor(    private val getImagesUseCase: GetImagesUseCase, private val getItemsUseCase: GetItemsUseCase) : ViewModel() {        private val _images = MutableStateFlow<List<Image>>(emptyList())    val images: StateFlow<List<Image>> = _images        private val _items = MutableStateFlow<List<Item>>(emptyList())    private val itemList: StateFlow<List<Item>> = _items        private val _searchQuery = MutableStateFlow("")    private val searchQuery: StateFlow<String> = _searchQuery        private val _currentPage = MutableStateFlow(1)    private val currentPage: StateFlow<Int> = _currentPage        private val _statistics = MutableStateFlow<Statistics>(Statistics())    val statistics: StateFlow<Statistics> = _statistics.asStateFlow()        private val _isBottomSheetVisible = MutableStateFlow(false)    val isBottomSheetVisible: StateFlow<Boolean> = _isBottomSheetVisible            init {        loadImages()        loadItemsForCurrentPage(currentPage.value)                viewModelScope.launch {            currentPage.collect { page ->                loadItemsForCurrentPage(page)            }        }    }        private fun loadImages() {        viewModelScope.launch {            _images.value = getImagesUseCase()        }    }        private fun loadItemsForCurrentPage(page: Int = _currentPage.value) {        viewModelScope.launch(Dispatchers.IO) {            _items.value = getItemsUseCase(page)        }    }        val filteredItems: StateFlow<List<Item>> = searchQuery.flatMapLatest { query ->        itemList.map { itemList ->            if (query.isBlank()) {                itemList            } else {                itemList.filter {                    it.title.contains(query, true) ||                            it.subtitle.contains(query, ignoreCase = true)                }            }        }    }.stateIn(viewModelScope, SharingStarted.Lazily, emptyList())            fun onFabClicked() {        _isBottomSheetVisible.value = true        calculateStatistics(_items.value)    }        fun closeBottomSheet() {        _isBottomSheetVisible.value = false    }        fun onSearchQueryChanged(query: String) {        _searchQuery.value = query    }        fun onPageChanged(page: Int) {        _currentPage.value = page    }            private fun calculateStatistics(listItems: List<Item>) {        val charFrequency = mutableMapOf<Char, Int>()        val maxOccurrenceCount = 3                listItems.forEach { item ->            (item.title + item.subtitle).forEach { char ->                // Ignore whitespace characters...                if (char.isWhitespace().not()) charFrequency[char] =                    charFrequency.getOrDefault(char, 0) + 1            }        }        val topCharacters =            charFrequency.entries.sortedByDescending { it.value }.take(maxOccurrenceCount)                .map { it.toPair() }        // set statistics data...        _statistics.value = Statistics(totalItems = listItems.size, topCharacters = topCharacters)    }    }