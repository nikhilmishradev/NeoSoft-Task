@file:OptIn(ExperimentalPagerApi::class)package com.androidtechguru.neosoft.task.ui.componentsimport androidx.compose.foundation.Imageimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.wrapContentHeightimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableIntStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.runtime.snapshotFlowimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.unit.dpimport coil.compose.rememberAsyncImagePainterimport com.androidtechguru.neosoft.task.utils.convertURLToDrawableimport com.androidtechguru.neosoft.task.domain.model.Imageimport com.google.accompanist.pager.ExperimentalPagerApiimport com.google.accompanist.pager.HorizontalPagerimport com.google.accompanist.pager.HorizontalPagerIndicatorimport com.google.accompanist.pager.rememberPagerState@Composablefun Carousel(carouselImages: List<Image>, onPageChanged: (Int) -> Unit) {    val pagerState = rememberPagerState()    val showPagerIndicator = carouselImages.size <= 10    var currentPage by remember { mutableIntStateOf(1) }        LaunchedEffect(pagerState) {        snapshotFlow { pagerState.currentPage }.collect { page ->            onPageChanged(page)        }    }        Box(modifier = Modifier        .fillMaxSize()) {                Column(modifier = Modifier            .fillMaxWidth()            .wrapContentHeight()        ) {            HorizontalPager(                count = carouselImages.size,                state = pagerState,                modifier = Modifier                    .fillMaxWidth()                    .height(200.dp)            ) { page ->                                Column(modifier = Modifier                    .fillMaxWidth()                    .wrapContentHeight()) {                    Image(                        painter = rememberAsyncImagePainter(carouselImages[page].url.convertURLToDrawable()),                        contentDescription = null,                        modifier = Modifier                            .fillMaxSize()                            .padding(4.dp)                            .clip(RoundedCornerShape(20.dp)),                        contentScale = ContentScale.Crop                    )                }                currentPage = pagerState.currentPage + 1            }            if (showPagerIndicator)                HorizontalPagerIndicator(pagerState = pagerState,                    modifier = Modifier                        .align(Alignment.CenterHorizontally)                        .padding(16.dp))            else                Text(text = "${pagerState.currentPage + 1}/${carouselImages.size}",                    modifier = Modifier                        .padding(8.dp)                        .align(Alignment.CenterHorizontally))                    }    }    }