package com.androidtechguru.neosoft.task.uiimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.material3.Buttonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.SpanStyleimport androidx.compose.ui.text.buildAnnotatedStringimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextDecorationimport androidx.compose.ui.text.withStyleimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.lifecycle.viewmodel.compose.viewModelimport com.androidtechguru.neosoft.task.viewmodel.MainViewModel@Composablefun StatisticsReport(viewModel: MainViewModel = viewModel()) {    val statistics by viewModel.statistics.collectAsState()        Column(        modifier = Modifier            .fillMaxWidth()            .padding(16.dp)    ) {        Text("Items Statistics Report",            fontSize = 24.sp,            style = MaterialTheme.typography.headlineMedium)        Spacer(modifier = Modifier.height(20.dp))        Text("Total Items: ${statistics.totalItems}",            fontSize = 16.sp,            textDecoration = TextDecoration.Underline,            fontWeight = FontWeight.Bold,            style = MaterialTheme.typography.headlineMedium)        Spacer(modifier = Modifier.height(20.dp))                Text("Top 3 Characters", style = MaterialTheme.typography.headlineSmall,            fontSize = 16.sp)        Spacer(modifier = Modifier.height(12.dp))                statistics.topCharacters.forEachIndexed { index, (char, count) ->            val annotatedString = buildAnnotatedString {                withStyle(style =                SpanStyle(                    fontWeight = FontWeight.ExtraBold,                    color = when (index) {                        0 -> Color.Magenta                        1 -> Color.Blue                        else -> Color.Red                    })) {                    append("$char = ")                }                withStyle(style = SpanStyle(color = Color.Black,                    fontWeight = FontWeight.SemiBold)) {                    append("$count")                }            }            Text(annotatedString)            Spacer(modifier = Modifier.height(5.dp))        }                Spacer(modifier = Modifier.height(16.dp))        Button(onClick = { viewModel.closeBottomSheet() }) {            Text("Close")        }        Spacer(modifier = Modifier.height(30.dp))    }}